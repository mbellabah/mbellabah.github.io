---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

const books = await getCollection('books');

// Helper function to get date for sorting and statistics
function getBookDate(book: any): Date | null {
  const dateCompleted = book.data.dateCompleted;
  if (dateCompleted instanceof Date) {
    return dateCompleted;
  }
  if (typeof dateCompleted === 'string' && dateCompleted !== 'Unknown') {
    return new Date(dateCompleted);
  }
  return null;
}

// Helper function to format date for display
function formatBookDate(book: any): string {
  const dateCompleted = book.data.dateCompleted;
  if (dateCompleted === 'Unknown') {
    return 'Unknown';
  }
  
  const date = getBookDate(book);
  if (date) {
    return date.toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'short' 
    });
  }
  return 'Unknown';
}

// Sort books by completion date (most recent first), with unknown dates at the end
const sortedBooks = books.sort((a, b) => {
  const dateA = getBookDate(a);
  const dateB = getBookDate(b);
  
  if (!dateA && !dateB) return 0;
  if (!dateA) return 1;  // Unknown dates go to end
  if (!dateB) return -1; // Unknown dates go to end
  
  return dateB.getTime() - dateA.getTime();
});

// Get unique genres for filtering
const genres = [...new Set(books.map(book => book.data.genre))].sort();

// Get reading statistics
const currentYear = new Date().getFullYear();
const booksWithDates = books.filter(book => getBookDate(book) !== null);
const booksThisYear = booksWithDates.filter(book => {
  const date = getBookDate(book);
  return date && date.getFullYear() === currentYear;
}).length;
const totalYears = new Set(booksWithDates.map(book => {
  const date = getBookDate(book);
  return date ? date.getFullYear() : null;
}).filter(year => year !== null)).size;
const averagePerYear = totalYears > 0 ? Math.round(booksWithDates.length / totalYears) : 0;

function createExcerpt(content: string | undefined, maxLength: number = 120): string {
  if (!content || content.length <= maxLength) return content || '';
  const truncated = content.substring(0, maxLength);
  const lastSpace = truncated.lastIndexOf(' ');
  return truncated.substring(0, lastSpace) + '...';
}
---

<BaseLayout title="Bookshelf - Mohamadou Bella Bah">
  <div class="max-w-4xl mx-auto">
    <header class="mb-8">
      <h1 class="text-3xl font-bold mb-4">Bookshelf</h1>
      <div class="flex items-center gap-6 text-sm text-gray-600">
        <span>{books.length} books total</span>
        <span>{booksThisYear} this year</span>
        {averagePerYear > 0 && <span>~{averagePerYear} per year average</span>}
      </div>
    </header>

    {/* Filter buttons */}
    <div class="mb-8 flex flex-wrap gap-2">
      <button class="filter-btn active" data-filter="all">
        All ({books.length})
      </button>
      {genres.map(genre => (
        <button class="filter-btn" data-filter={genre}>
          {genre} ({books.filter(book => book.data.genre === genre).length})
        </button>
      ))}
    </div>

    {/* Books list */}
    <div class="space-y-6">
      {sortedBooks.map((book) => {
        const rawContent = book.body;
        const excerpt = createExcerpt(rawContent);
        
        return (
          <article class="book-item border-b border-gray-200 pb-6 last:border-b-0" data-genre={book.data.genre}>
            <div class="flex items-start justify-between mb-2">
              <div class="flex-1">
                <h2 class="text-xl font-semibold text-gray-900 mb-1">
                  {book.data.title}
                </h2>
                <p class="text-gray-700 mb-1">
                  by {book.data.author}
                </p>
              </div>
              <div class="text-right text-sm text-gray-600 ml-4">
                <div>{formatBookDate(book)}</div>
                <div class="text-xs bg-gray-100 px-2 py-1 rounded mt-1">
                  {book.data.genre}
                </div>
              </div>
            </div>
            
            {book.data.rating && (
              <div class="flex items-center mb-2">
                {Array.from({ length: 5 }, (_, i) => (
                  <span class={`text-sm ${i < (book.data.rating || 0) ? 'text-yellow-500' : 'text-gray-300'}`}>
                    â˜…
                  </span>
                ))}
              </div>
            )}
            
            {rawContent && (
              <div class="review-content">
                <p class="text-gray-700 text-sm leading-relaxed excerpt">
                  {excerpt}
                </p>
                {rawContent.length > 120 && (
                  <>
                    <p class="text-gray-700 text-sm leading-relaxed full-review" style="display: none;">
                      {rawContent}
                    </p>
                    <button class="expand-btn text-blue-600 text-xs hover:underline mt-1">
                      Read full review
                    </button>
                  </>
                )}
              </div>
            )}
          </article>
        );
      })}
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const filterButtons = document.querySelectorAll('.filter-btn');
      const bookItems = document.querySelectorAll('.book-item');
      const expandButtons = document.querySelectorAll('.expand-btn');
      
      // Filter functionality
      filterButtons.forEach(button => {
        button.addEventListener('click', function(event) {
          const target = event.target as HTMLElement;
          const filter = target.getAttribute('data-filter');
          
          // Update active button
          filterButtons.forEach(btn => btn.classList.remove('active'));
          target.classList.add('active');
          
          // Filter books
          bookItems.forEach(item => {
            const htmlItem = item as HTMLElement;
            const genre = htmlItem.getAttribute('data-genre');
            if (filter === 'all' || genre === filter) {
              htmlItem.style.display = 'block';
            } else {
              htmlItem.style.display = 'none';
            }
          });
        });
      });
      
      // Expand/collapse review functionality
      expandButtons.forEach(button => {
        button.addEventListener('click', function(event) {
          const target = event.target as HTMLElement;
          const reviewContent = target.closest('.review-content') as HTMLElement;
          const excerpt = reviewContent.querySelector('.excerpt') as HTMLElement;
          const fullReview = reviewContent.querySelector('.full-review') as HTMLElement;
          
          if (fullReview.style.display === 'none') {
            // Expand
            excerpt.style.display = 'none';
            fullReview.style.display = 'block';
            target.textContent = 'Show less';
          } else {
            // Collapse
            excerpt.style.display = 'block';
            fullReview.style.display = 'none';
            target.textContent = 'Read full review';
          }
        });
      });
    });
  </script>

  <style>
    .filter-btn {
      padding: 0.25rem 0.75rem;
      font-size: 0.875rem;
      border: 1px solid #d1d5db;
      border-radius: 0.375rem;
      background-color: white;
      color: #374151;
      transition: background-color 0.15s ease-in-out, color 0.15s ease-in-out;
      cursor: pointer;
    }
    
    .filter-btn:hover {
      background-color: #f9fafb;
    }
    
    .filter-btn.active {
      background-color: #2563eb;
      color: white;
      border-color: #2563eb;
    }
    
    .filter-btn.active:hover {
      background-color: #1d4ed8;
    }
  </style>
</BaseLayout>