---
export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css" integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0" crossorigin="anonymous">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Crimson+Pro:ital,wght@0,200..900;1,200..900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/src/styles/global.css">
    
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const postContent = document.querySelector('.post-content') as HTMLElement | null;
        if (!postContent) return;

        const footnoteRefs = Array.from(
          document.querySelectorAll('a[href^="#user-content-fn-"], a[href^="#fn"], sup a')
        );

        const references: HTMLElement[] = [];
        const sideNotes: HTMLElement[] = [];

        footnoteRefs.forEach((ref, idx) => {
          const href = ref.getAttribute('href');
          if (!href) return;

          // Accept both #fnX and #user-content-fn-X formats
          if (!(href.startsWith('#fn') || href.startsWith('#user-content-fn-'))) return;

          const footnoteId = href.slice(1);
          const footnoteDefinition = document.getElementById(footnoteId);
          if (!footnoteDefinition) return;

          // Build the side note element
          const sideNote = document.createElement('div');
          sideNote.className = 'footnote-side';

          // Extract footnote definition content (support <p> inside, list items, etc.)
          let footnoteContent = '';
          const contentP = footnoteDefinition.querySelector('p');
          if (contentP) {
            footnoteContent = contentP.innerHTML;
          } else if (
            footnoteDefinition.parentElement &&
            footnoteDefinition.parentElement.tagName === 'LI'
          ) {
            const listItem = footnoteDefinition.parentElement;
            footnoteContent = listItem.innerHTML.replace(/^<a[^>]*>[^<]*<\/a>\s*/, '');
          } else {
            footnoteContent = footnoteDefinition.innerHTML;
          }

          const refText = ref.textContent || String(idx + 1);
          sideNote.innerHTML = `<span class="footnote-number">${refText}</span>${footnoteContent}`;

          // Append the side note to the main post container so all share the same positioning context
          postContent.appendChild(sideNote);

          references.push(ref as HTMLElement);
          sideNotes.push(sideNote);
        });

        // Positioning algorithm to keep side notes aligned and non-overlapping
        function positionFootnotes() {
          if (!postContent) return;
          const postRect = postContent.getBoundingClientRect();
          const occupied: { top: number; bottom: number }[] = [];

          sideNotes.forEach((note, i) => {
            const refRect = references[i].getBoundingClientRect();
            // Ideal top relative to postContent
            let idealTop = refRect.top - postRect.top;

            const noteHeight = note.offsetHeight;
            const minSpacing = 10;

            let finalTop = idealTop;
            for (const range of occupied) {
              if (
                finalTop < range.bottom + minSpacing &&
                finalTop + noteHeight > range.top
              ) {
                finalTop = range.bottom + minSpacing;
              }
            }

            occupied.push({ top: finalTop, bottom: finalTop + noteHeight });
            note.style.top = `${finalTop}px`;
          });
        }

        // Initial positioning after a brief delay (let fonts/images settle)
        setTimeout(positionFootnotes, 200);

        // Recalculate on viewport changes
        window.addEventListener('resize', () => {
          clearTimeout((window as any)._footnoteResizeTimer);
          (window as any)._footnoteResizeTimer = setTimeout(positionFootnotes, 100);
        });
        window.addEventListener('scroll', () => {
          requestAnimationFrame(positionFootnotes);
        });
      });
    </script>
  </head>
  <body class="bg-white text-gray-900 font-serif">
    <nav class="border-b border-gray-200 py-4">
      <div class="max-w-4xl mx-auto px-6">
        <div class="flex items-center justify-between">
          <a href="/" class="text-xl font-semibold">Mohamadou Bella Bah</a>
          <div class="flex space-x-8">
            <a href="/" class="hover:text-gray-600">main</a>
            <a href="/about" class="hover:text-gray-600">about</a>
            <a href="/bookshelf" class="hover:text-gray-600">bookshelf</a>
            <a href="/tags" class="hover:text-gray-600">tags</a>
          </div>
        </div>
      </div>
    </nav>
    <main class="max-w-4xl mx-auto px-6 py-8">
      <slot />
    </main>
  </body>
</html>