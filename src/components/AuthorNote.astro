---
export interface Props {
  title?: string;
  class?: string;
}

const { title = "Author's Note", class: className = "" } = Astro.props;
---

<div class={`author-note bg-gray-100 rounded-xl px-5 pt-5 my-8 ${className}`}>
  <div class="author-note-header flex items-center justify-between mb-3">
    <h4 class="author-note-title font-bold text-gray-800 text-sm tracking-wide uppercase">
      {title}
    </h4>
    <button 
      class="author-note-toggle flex items-center justify-center w-6 h-6 rounded-full bg-gray-200 hover:bg-gray-300 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-opacity-50"
      aria-label="Toggle author note"
    >
      <svg class="author-note-icon w-3 h-3 text-gray-600 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
      </svg>
    </button>
  </div>
  <div class="author-note-content text-gray-700 leading-relaxed collapsed">
    <slot />
  </div>
</div>

<style>
  .author-note {
    font-family: var(--font-serif);
    border: 1px solid #e5e7eb;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  }
  
  .author-note-title {
    letter-spacing: 0.05em;
    font-size: 0.8rem;
  }
  
  .author-note-content {
    font-size: 0.95rem;
    overflow: hidden;
    transition: max-height 0.3s ease-out, opacity 0.3s ease-out;
  }
  
  .author-note-content.collapsed {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    line-height: 1.6;
    max-height: calc(2 * 1.6em);
    opacity: 1;
    margin-bottom: 1rem;
    word-break: break-word;
    hyphens: auto;
  }
  
  
  .author-note-content.expanded {
    display: block;
    -webkit-line-clamp: none;
    -webkit-box-orient: initial;
    max-height: none;
    opacity: 1;
    word-break: normal;
    hyphens: none;
  }
  
  
  .author-note-icon.rotated {
    transform: rotate(180deg);
  }
  
  .author-note-content p {
    margin-bottom: 0.8rem;
    line-height: 1.6;
  }
  
  .author-note-content p:last-child {
    margin-bottom: 0;
  }
  
  .author-note-content em {
    font-style: italic;
  }
  
  .author-note-content strong {
    font-weight: 600;
  }
  
  .author-note-content a {
    color: #3b82f6;
    text-decoration: none;
    background: linear-gradient(120deg, rgba(59, 130, 246, 0.1) 0%, rgba(59, 130, 246, 0.1) 100%);
    background-repeat: no-repeat;
    background-size: 100% 0.15em;
    background-position: 0 92%;
    transition: all 0.2s ease;
  }
  
  .author-note-content a:hover {
    background-size: 100% 100%;
    background: linear-gradient(120deg, rgba(59, 130, 246, 0.15) 0%, rgba(59, 130, 246, 0.1) 100%);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Find all author note toggles on the page
    const toggles = document.querySelectorAll('.author-note-toggle');
    
    toggles.forEach(toggle => {
      const authorNote = toggle.closest('.author-note');
      if (!authorNote) return;
      
      const content = authorNote.querySelector('.author-note-content');
      const icon = toggle.querySelector('.author-note-icon');
      
      if (!content || !icon) return;
      
      toggle.addEventListener('click', function() {
        const isCollapsed = content.classList.contains('collapsed');
        
        if (isCollapsed) {
          // Expand
          content.classList.remove('collapsed');
          content.classList.add('expanded');
          icon.classList.add('rotated');
          toggle.setAttribute('aria-expanded', 'true');
        } else {
          // Collapse
          content.classList.remove('expanded');
          content.classList.add('collapsed');
          icon.classList.remove('rotated');
          toggle.setAttribute('aria-expanded', 'false');
        }
      });
      
      // Set initial state
      toggle.setAttribute('aria-expanded', 'false');
    });
  });
</script>